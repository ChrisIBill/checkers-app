channels:
  /:
    publish:
      message:
        oneOf:
          - $ref: "#/components/messages/AuthorizationTokenResponse"
    bindings:
      ws:
        query:
          type: object
          properties:
            token:
              type: string
          required: [token]
  /Auth: {}
  /Guest:
    publish:
      message:
        $ref: "#/components/messages/UpdateClientsInRoom"
    subscribe:
      message:
        oneOf:
          - $ref: "#/components/messages/ClientJoinRoomRequest"
          - $ref: "#/components/messages/ClientFindRoomRequest"
            
  /User: {}
  /Admin: {}

components:
  messages:
    AuthorizationTokenResponse:
      name: Auth:Token_Res
      payload:
        type: object
        properties:
          status:
            type: httpStatusCode
          data:
            type: object
            properties:
              username:
                type: string
              role:
                type: number
    InitializeRoom:
      name: Room:Init
      description: "Sent to all clients in a room after all required clients
        have joined and loaded into the room, or if no clients are required,
        sent to each client after they have joined the room."
      payload:
        type: object
        properties:
          roomInfo:
            type: object
            properties:
              roomType:
                type: string
                enum: [
                  "checkers",
                  "chat"
                ]
              roomID:
                type: string
          data:
            type: RoomInitData
    UpdateClientsInRoom:
      name: Room:Update_Room
      payload:
        type: object
        properties:
          roomInfo:
              type: object
              properties:
                roomType:
                  type: string
                  enum: [
                    "checkers",
                    "chat"
                  ]
                roomID:
                  type: string
          data:
            type: object
            properties: {}
    ClientJoinRoomRequest:
      name: Room:Join_Req
      description: "Request to join a room by id."
      payload:
        type: object
        properties:
          roomInfo:
            type: object
            properties:
              roomType:
                type: string
                enum: [
                  "checkers",
                  "chat"
                ]
              roomID:
                type: string
          data:
            type: object
            properties: 
              status:
                type: string
                enum: []
              boardState:
                type: string
                description: "The current state of the board in FEN-like notation."
    ClientFindRoomRequest:
      name: Room:Find_Req
      payload:
        type: object
        properties:
          roomType:
            type: string
            enum: [
              "checkers",
              "chat"
            ]
          roomStyle:
            type: string
            enum: [
              "pvp",
              "computer",
              "local"
            ]
          required: [
            "roomType"
          ]
    
  schemas:
    type: CheckersRoomInitData
    properties:
      status:
        type: string
        enum: []
      boardState:
        type: string
        description: "The current state of the board in FEN-like notation."
      players:
        type: array
        items:
          type: string
          description: "The username of the player."
      curPlayer:
        type: string
      validSels:
        type: array
        items:
          type: string
          description: "The valid selections for the current player."
